{"version":3,"sources":["webpack:///./src/components/Notes/Editor.vue","webpack:///./src/components/Notes/Editor.vue?9042","webpack:///./src/components/Notes/Editor.vue?d611","webpack:///./src/Phrasebook/PhraseCard.vue","webpack:///./src/Phrasebook/PhraseCard.vue?0f23","webpack:///./src/Phrasebook/PhraseCard.vue?dc76","webpack:///./src/Phrasebook/Editor.vue?921d","webpack:///./src/Phrasebook/Editor.vue","webpack:///./src/Phrasebook/Context/TranslationEditor.vue","webpack:///./src/Phrasebook/Context/TranslationEditor.vue?8d7f","webpack:///./src/Phrasebook/Context/TranslationEditor.vue?7ada","webpack:///./src/Phrasebook/Editor.vue?48a8","webpack:///./src/Phrasebook/Editor.vue?5027","webpack:///./src/Phrasebook/Editor.vue?7044","webpack:///./src/Phrasebook/PhraseCard.vue?680c","webpack:///./src/components/Notes/index.vue","webpack:///./src/components/Notes/index.vue?4c77","webpack:///./src/components/Notes/index.vue?7695"],"names":["icon","header","add","caption","notes","n","i","key","class","type","remove","components","EditorCard","props","modelValue","Array","default","undefined","emits","setup","emit","get","set","value","push","splice","render","style","phrase","editor","lect","copy","glossed","translation","contextTranslation","blocks","b","ref","el","block","Context","Block","Notes","String","Object","Boolean","context","text","filter","visible","map","display","join","navigator","clipboard","writeText","__scopeId","file","corpus","section","s","name","phrases","p","id","button","entities","e","colors","size","sizes","entity","tags","t","j","ButtonAlert","contextSource","Math","max","length","_","entries","PhraseCard","NotesEditor","BlocksOrderEditor","BlockEditor","ContextTranslationEditor","JSON","parse","localStorage","then","defaultFile","filename","storage","addBlock","states","transition","removeBlock","index","indexOf","immediate","forEach","Set","split","pieces","ps","isWrapped","start","end","toPiece","patterns","slice","separator"],"mappings":"6OACE,eAMa,GANDA,KAAK,gBAAgBC,OAAO,QAAS,SAAQ,EAAAC,K,CAC5CC,QAAO,gBAAC,iBAAQ,CAAR,eAAQ,wB,wBACtB,iBAAuB,E,mBAA5B,eAGM,2BAHgB,EAAAC,OAAK,SAAdC,EAAGC,G,wBAAhB,eAGM,OAHwBC,IAAKD,EAAGE,MAAM,O,gBAC1C,eAAwC,S,yCAAxB,EAAAJ,MAAME,GAAC,GAAGG,KAAK,Q,yCAAf,EAAAL,MAAME,MACtB,eAAuC,GAAlCN,KAAK,QAAS,QAAK,mBAAE,EAAAU,OAAOJ,K,kFCDxB,iBAAgB,CAC7BK,WAAY,CAAEC,aAAA,MACdC,MAAO,CACLC,WAAY,CAAEL,KAAMM,MAA6BC,aAASC,IAE5DC,MAAO,CAAC,qBACRC,MAN6B,SAMvBN,EANuB,GAMR,IAANO,EAAM,EAANA,KACPhB,EAAQ,eAAS,CACrBiB,IAAK,kBAAMR,EAAMC,YACjBQ,IAAK,SAACjB,GAAD,OAAOe,EAAK,oBAAqBf,MAGxC,SAASH,IACHE,EAAMmB,MAAOnB,EAAMmB,MAAMC,KAAK,IAC7BpB,EAAMmB,MAAQ,CAAC,IAEtB,SAASb,EAAOJ,GACVF,EAAMmB,OAAOnB,EAAMmB,MAAME,OAAOnB,EAAG,GAGzC,MAAO,CAAEF,QAAOF,MAAKQ,aCrBzB,EAAOgB,OAASA,EAED,U,+HCHNlB,MAAM,mBAAmBmB,MAAA,gB,GAItBnB,MAAM,Q,GAOTA,MAAM,iB,8LAZF,EAAAoB,Q,iBAAX,eAsBM,O,MAtBapB,MAAK,CAAC,QAAO,OAAkB,EAAAqB,U,CAChD,eAUM,MAVN,EAUM,CATY,EAAAC,M,iBAAhB,eAIW,gBAHT,eAAyC,GAApC9B,KAAK,eAAgB,QAAO,EAAA+B,M,oBACjC,eAA0C,G,WAAzB,EAAAC,Q,qDAAA,EAAAA,QAAO,IAAEhC,KAAK,U,uBAC/B,eAAgC,KAAhC,EAAgC,eAAZ,EAAA8B,MAAI,I,2BAE1B,eAGE,GAFCG,YAAa,EAAAC,mBACbC,OAAQ,EAAAN,OAAM,GAAQ,EAAAM,Q,mCAG3B,eAQM,MARN,EAQM,E,mBAPJ,eAME,2BALiB,EAAAP,OAAOO,QAAM,SAAtBC,EAAG9B,G,wBADb,eAME,GAJC+B,IAAG,SAAGC,GAAH,OAAU,EAAAH,OAAOX,KAAKc,IACzB/B,IAAKD,EACL0B,QAAS,EAAAA,QACTO,MAAOH,G,uCAGZ,eAAoD,GAA7C5B,MAAM,eAAgBJ,MAAO,EAAAwB,OAAOxB,O,oHCbhC,iBAAgB,CAC7BO,WAAY,CAAE6B,UAAA,KAASC,QAAA,KAAOC,QAAA,MAC9B7B,MAAO,CACLiB,KAAM,CAAErB,KAAMkC,OAAQ3B,QAAS,IAC/BY,OAAQ,CAAEnB,KAAMmC,OAA4B5B,aAASC,GACrDY,OAAQgB,SAEV1B,MAP6B,SAOvBN,GACJ,IAAMmB,EAAU,gBAAI,GACdE,EAAqB,gBAAS,kBAClCrB,EAAMiB,KAAOjB,EAAMe,OAAOkB,aAAU7B,KAGhCkB,EAAS,eAAS,IAClBY,EAAO,gBAAS,kBACpBZ,EACGa,QAAO,SAACZ,GAAD,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAGa,WACjBC,KAAI,SAACd,GAAD,OAAOA,EAAEe,QAAQJ,QACrBK,KAAK,QAEV,SAASrB,IACPsB,UAAUC,UAAUC,UAAUR,EAAKxB,OAGrC,MAAO,CAAES,UAASG,SAAQJ,OAAMG,yB,UC5BpC,EAAOR,OAASA,EAChB,EAAO8B,UAAY,kBAEJ,U,6GCRf,W,sJCC6BhD,MAAM,4B,GAC1BA,MAAM,S,GACJA,MAAM,mB,GACJA,MAAM,S,EACT,eAAyB,KAAtBA,MAAM,QAAO,SAAK,G,GACjBA,MAAM,c,SAQQA,MAAM,S,EACxB,eAA8B,KAA3BA,MAAM,QAAO,cAAU,G,EAO5B,eAGI,KAHDA,MAAM,2BAA0B,uFAGnC,G,iBAKyC,2E,iBAGe,sF,6OAhCnD,EAAAiD,MAAQ,EAAAC,Q,iBAAnB,eAuCM,MAvCN,EAuCM,CAtCJ,eAoCM,MApCN,EAoCM,CAnCJ,eAwBM,MAxBN,EAwBM,CAvBJ,eASM,MATN,EASM,CARJ,EACA,eAMK,KANL,EAMK,C,eALH,eAIS,U,qDAJQ,EAAAC,QAAO,K,qBACtB,eAES,2BAFW,EAAAD,QAAM,SAAXE,G,wBAAf,eAES,UAFoBrD,IAAKqD,EAAEC,KAAOtC,MAAOqC,G,eAC7CA,EAAEC,MAAI,gB,qBAFI,EAAAF,eAOV,EAAAA,S,iBAAX,eAOM,MAPN,EAOM,CANJ,E,eACA,eAIS,U,qDAJQ,EAAA/B,OAAM,K,qBACrB,eAES,2BAFW,EAAA+B,QAAQG,SAAO,SAApBC,G,wBAAf,eAES,UAF6BxD,IAAKwD,EAAEC,GAAKzC,MAAOwC,G,eACpDA,EAAEF,MAAI,gB,qBAFI,EAAAjC,a,sBAMnB,EAIA,eAA+D,GAAlDrB,IAAK,EAAAqB,OAAOoC,GAAKpC,OAAQ,EAAAA,OAASC,QAAQ,G,qBAEzC,EAAAI,a,iBAAhB,eASW,gBART,eAAkE,G,WAAtC,EAAAM,M,qDAAA,EAAAA,MAAK,IAAUX,OAAQ,EAAAK,Y,iDAAA,EAAAA,YAAW,K,gCAC9D,eAEc,G,WAFQ,EAAAA,YAAY7B,M,qDAAZ,EAAA6B,YAAY7B,MAAK,K,YAAE,iBAEzC,C,6BACA,eAG2B,G,WAHQ,EAAA6B,YAAYa,Q,qDAAZ,EAAAb,YAAYa,QAAO,K,YAAE,iBAGxD,C,2DAGe,EAAAP,O,iBAAnB,eAA4C,G,iBAAT,EAAAA,M,qDAAA,EAAAA,MAAK,K,+OC1B/B/B,MAAM,yB,GACJA,MAAM,O,GAKNA,MAAM,gB,mHAlBnB,eAwBa,GAvBVyD,OAAQ,EAAAhC,YAAW,WACpBjC,KAAK,uBACLC,OAAO,sBACN,SAAQ,EAAAC,K,gBAEEC,QAAO,gBAAC,iBAAQ,CAAR,eAAQ,wB,wBAI3B,iBAaW,CAbK,EAAA8B,a,mBACd,eAWM,8BAXgB,EAAAiC,UAAQ,SAAjBC,EAAG7D,G,wBAAhB,eAWM,OAX2BC,IAAKD,EAAGE,MAAM,Y,CAC7C,eASM,MATN,EASM,CARJ,eAGM,MAHN,EAGM,CAFJ,eAA2D,MAAvDA,MAAK,CAAC,eAAuB,EAAA4D,OAAO9D,K,eAAO6D,EAAE,IAAD,G,eAChD,eAA4D,S,yCAA5CA,EAAE,GAAD,GAAME,KAAM,EAAAC,MAAMhE,GAAGiE,OAAQ9D,KAAK,Q,gDAAnC0D,EAAE,S,mBAEpB,eAGM,2BAHgB,EAAAK,KAAKlE,IAAC,SAAfmE,EAAGC,G,wBAAhB,eAGM,OAH0BnE,IAAKkE,EAAE,GAAIjE,MAAM,O,CAC/C,eAAsC,IAAtC,EAAsC,eAAXiE,EAAE,IAAD,G,eAC5B,eAA6D,S,yCAA7CA,EAAE,GAAD,GAAMJ,KAAM,EAAAC,MAAMhE,GAAGkE,KAAKE,GAAIjE,KAAK,Q,gDAApCgE,EAAE,W,mDAZV,EAAAxC,Y,MAAc,S,mBAC5B,iBAA6C,CAA7C,eAA6C,GAA/B,UAAO,+BAAE,EAAAA,YAAW,mB,4FCHzB,iBAAgB,CAC7B4B,KAAM,iCACNlD,WAAY,CACVgE,cAAA,KACA/D,aAAA,MAEFC,MAAO,CACLC,WAAY,CACVL,KAAMmC,OACN5B,aAASC,IAGbC,MAAO,CAAC,qBACRC,MAb6B,SAavBN,EAbuB,GAaR,IAANO,EAAM,EAANA,KACPa,EAAc,eAAS,CAC3BZ,IAAK,kBAAMR,EAAMC,YACjBQ,IAAK,SAACmD,GAAD,OAAOrD,EAAK,oBAAqBqD,MAGlCG,EAAgB,eAAO,gBAAiB,IACxCV,EAAW,gBAAS,kCAAMjC,EAAYV,aAAlB,aAAM,EAAmB2B,KAAI,SAACuB,GAAD,OAAOA,EAAEF,aAC1DC,EAAO,gBAAS,kCAAMvC,EAAYV,aAAlB,aAAM,EAAmB2B,KAAI,SAACuB,GAAD,OAAOA,EAAED,WACtDF,EAAQ,gBAAS,kCACrBrC,EAAYV,aADS,aACrB,EAAmB2B,KAAI,gBAAGqB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAX,MAAuB,CAC5CD,OAAQM,KAAKC,IAAIP,EAAO,GAAGQ,OAAQ,GACnCP,KAAMA,EAAKtB,KAAI,SAACuB,GAAD,OAAOI,KAAKC,IAAIL,EAAE,GAAGM,OAAQ,aAG1CX,EAAS,gBAAS,kCACtBF,EAAS3C,aADa,aACtB,EAAgB2B,KAAI,SAAC8B,EAAG1E,GAAJ,MAAU,eAAiBA,QAEjD,SAASJ,IACP+B,EAAYV,MAAQqB,OAAOqC,QAAQL,EAAcrD,OAAO2B,KACtD,sCAAEqB,EAAF,KAAUC,EAAV,WAAqB,CACnBD,OAAQ,CAACA,EAAQ,IACjBC,KAAM,eAAIA,GAAMtB,KAAI,SAACuB,GAAD,MAAO,CAACA,EAAG,WAKrC,MAAO,CAAExC,cAAa/B,MAAKgE,WAAUM,OAAMF,QAAOF,aC3CtD,EAAO1C,OAAS,EAED,Q,wBCcA,iBAAgB,CAC7Bf,WAAY,CACVuE,aAAA,KACAC,YAAA,OACAC,kBAAA,OACAC,YAAA,OACAC,yBAAA,GAEFnE,MAR6B,WAS3B,IAAMuC,EAAS,eAAI,IACnB,IACEA,EAAOnC,MAAQgE,KAAKC,MAAMC,aAAa,4BACvC,SACA,eAAS,cAAcC,MAAK,SAAChB,GAAD,OAAQhB,EAAOnC,MAAQmD,KAErD,IAAMf,EAAU,eAAI,IACd/B,EAAS,eAAI,IACbK,EAAc,eAAI,IAClBa,EAAU,eAAI,IACd8B,EAAgB,eAAI,IACpBrC,EAAQ,eAAI,IACZkB,EAAO,eAAwB,CACnCkC,YAAa,GACbC,SAAU,aACVC,QAAS,sBAwCX,SAASC,IACPvD,EAAMhB,MAAQgB,EAAMhB,MAAQ,CAC1BwE,OAAQ,CAAC,CAAE5C,QAAS,CAAC,CAAEJ,KAAM,cAAgBiD,WAAY,UAE3D/D,EAAYV,MAAMY,OAAOX,KAAKe,EAAMhB,OAEtC,SAAS0E,IACP,IAAM9D,EAAS,eAAMF,EAAYV,MAAMY,QACjC+D,EAAQ/D,EAAOgE,QAAQ,eAAM5D,EAAMhB,QACzCY,EAAOV,OAAOyE,EAAO,GACrB3D,EAAMhB,MAAQY,EAAOA,EAAO4C,OAAS,GAGvC,OAlDA,eAAQ,UAAWjC,GACnB,eAAQ,gBAAiB8B,GAEzB,eAAMlB,GAAQ,SAACA,GAAD,OAAaC,EAAQpC,MAAQmC,EAAOA,EAAOqB,OAAS,KAAK,CACrEqB,WAAW,IAEb,eACEzC,GACA,SAACA,GACC,OAAIA,QAAJ,IAAIA,KAASG,UACXlC,EAAOL,MAAQoC,EAAQG,QAAQH,EAAQG,QAAQiB,OAAS,MAE5D,CAAEqB,WAAW,IAEf,eACE,CAACxE,EAAQ6B,IACT,YAAa,0BAAX7B,EAAW,KACNA,IACA6B,EAAKlC,MAAMK,EAAOoC,MAAKP,EAAKlC,MAAMK,EAAOoC,IAAM,CAAE7B,OAAQ,KAC9DF,EAAYV,MAAQkC,EAAKlC,MAAMK,EAAOoC,IACtClB,EAAQvB,MAAQ,GAChBqD,EAAcrD,MAAQ,GACtBK,EAAOkB,QAAQuD,SAAQ,YAAqB,IAAlB9B,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAChC1B,EAAQvB,MAAMgD,GAAU,IAAI+B,IAC5B1B,EAAcrD,MAAMgD,GAAU,IAAI+B,IAAI9B,EAAK+B,MAAM,YAGrD,CAAEH,WAAW,IAEf,eACEnE,GACA,SAACA,GACC,OAAIA,QAAJ,IAAIA,KAAaE,SACfI,EAAMhB,MAAQU,EAAYE,OAAOF,EAAYE,OAAO4C,OAAS,MAEjE,CAAEqB,WAAW,IAeR,CACL3C,OACAC,SACAC,UACA/B,SACAK,cACAM,QACAuD,WACAG,kB,oBClGN,EAAOvE,OAASA,EAChB,EAAO8B,UAAY,kBAEJ,gB,kCCTf,W,kCCAA,W,2DCC2BhD,MAAM,O,mBAIiBA,MAAM,kB,mBAInCA,MAAM,Y,+BARd,EAAAJ,MAAM2E,Q,iBAAjB,eAWM,MAXN,EAWM,E,mBAVJ,eASI,2BATiB,EAAAyB,QAAM,SAAhBC,EAAInG,G,wBAAf,eASI,KAT0BC,IAAKD,GAAC,E,mBAClC,eAOW,2BAPgCmG,GAAE,WAAR/B,GAAC,IAAlB3B,EAAkB,EAAlBA,KAAMI,EAAY,EAAZA,Q,mDAA2BuB,GAAC,CAC5B,UAAZvB,G,iBAAZ,eAAkD,wBAAdJ,GAAI,IACX,cAAZI,G,iBAAjB,eAES,OAFT,EAES,eADPJ,GAAI,IAEoB,aAAZI,G,iBAAd,eAAoD,qBAAXJ,GAAI,K,iBAC7C,eAA+C,OAA/C,EAA+C,eAAdA,GAAI,K,yGCL9B,iBAAgB,CAC7BlC,MAAO,CACLT,MAAO,CAAEK,KAAMM,MAA6BC,QAAS,iBAAM,MAE7DG,MAJ6B,SAIvBN,GACJ,SAAS6F,EAAU3D,EAAc4D,EAAeC,GAC9C,OAAO7D,EAAK,KAAO4D,GAAS5D,EAAKA,EAAKgC,OAAS,KAAO6B,EAExD,SAASC,EAAQ9D,GAOf,IANA,IAAM+D,EAAW,CACf,CAAC,IAAK,IAAK,aACX,CAAC,IAAK,IAAK,WACX,CAAC,IAAK,IAAK,aAGb,MAAoCA,EAApC,eAA8C,8BAAlCH,EAAkC,KAA3BC,EAA2B,KAAtBzD,EAAsB,KAC5C,GAAIuD,EAAU3D,EAAM4D,EAAOC,GACzB,MAAO,CAAE7D,KAAMA,EAAKgE,MAAM,GAAI,GAAI5D,WAEtC,MAAO,CAAEJ,OAAMI,QAAS,SAE1B,IAAMqD,EAAS,gBAAS,WACtB,IAAMQ,EAAY,kCAClB,OAAOnG,EAAMT,MAAM8C,KAAI,SAAC7C,GAAD,OAAOA,EAAEkG,MAAMS,GAAW9D,KAAI,SAAC7C,GAAD,OAAOwG,EAAQxG,YAEtE,MAAO,CAAEmG,aC1Bb,EAAO9E,OAASA,EAED","file":"js/chunk-f1b99f5e.d7a6e353.js","sourcesContent":["<template>\n  <EditorCard icon=\"sticky_note_2\" header=\"Notes\" @action=\"add\">\n    <template #caption><slot /></template>\n    <div v-for=\"(n, i) in notes\" :key=\"i\" class=\"row\">\n      <input v-model=\"notes[i]\" type=\"text\" />\n      <btn icon=\"clear\" @click=\"remove(i)\" />\n    </div>\n  </EditorCard>\n</template>\n\n<script lang=\"ts\">\nimport { PropType, computed, defineComponent } from \"vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\n\nexport default defineComponent({\n  components: { EditorCard },\n  props: {\n    modelValue: { type: Array as PropType<string[]>, default: undefined },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const notes = computed({\n      get: () => props.modelValue,\n      set: (n) => emit(\"update:modelValue\", n),\n    });\n\n    function add() {\n      if (notes.value) notes.value.push(\"\");\n      else notes.value = [\"\"];\n    }\n    function remove(i: number) {\n      if (notes.value) notes.value.splice(i, 1);\n    }\n\n    return { notes, add, remove };\n  },\n});\n</script>\n","\nimport { PropType, computed, defineComponent } from \"vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\n\nexport default defineComponent({\n  components: { EditorCard },\n  props: {\n    modelValue: { type: Array as PropType<string[]>, default: undefined },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const notes = computed({\n      get: () => props.modelValue,\n      set: (n) => emit(\"update:modelValue\", n),\n    });\n\n    function add() {\n      if (notes.value) notes.value.push(\"\");\n      else notes.value = [\"\"];\n    }\n    function remove(i: number) {\n      if (notes.value) notes.value.splice(i, 1);\n    }\n\n    return { notes, add, remove };\n  },\n});\n","import { render } from \"./Editor.vue?vue&type=template&id=60866d64\"\nimport script from \"./Editor.vue?vue&type=script&lang=ts\"\nexport * from \"./Editor.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div v-if=\"phrase\" class=\"col-1\" :class=\"{ card: !editor }\">\n    <div class=\"row-1 small wrap\" style=\"width: 100%\">\n      <template v-if=\"lect\">\n        <btn icon=\"content_copy\" @click=\"copy\" />\n        <toggle v-model=\"glossed\" icon=\"layers\" />\n        <h2 class=\"flex\">{{ lect }}</h2>\n      </template>\n      <Context\n        :translation=\"contextTranslation\"\n        :blocks=\"editor ? [] : blocks\"\n      />\n    </div>\n    <div class=\"row wrap flex\">\n      <Block\n        v-for=\"(b, i) in phrase.blocks\"\n        :ref=\"(el) => blocks.push(el)\"\n        :key=\"i\"\n        :glossed=\"glossed\"\n        :block=\"b\"\n      />\n    </div>\n    <Notes class=\"text-caption\" :notes=\"phrase.notes\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Context from \"./Context/index.vue\";\nimport Block from \"./Block/index.vue\";\nimport Notes from \"@/components/Notes/index.vue\";\n\nimport { computed, defineComponent, PropType, reactive, ref } from \"vue\";\n\nimport { Phrase, BlockVue } from \"./types\";\n\nexport default defineComponent({\n  components: { Context, Block, Notes },\n  props: {\n    lect: { type: String, default: \"\" },\n    phrase: { type: Object as PropType<Phrase>, default: undefined },\n    editor: Boolean,\n  },\n  setup(props) {\n    const glossed = ref(false);\n    const contextTranslation = computed(() =>\n      props.lect ? props.phrase.context : undefined\n    );\n\n    const blocks = reactive([] as BlockVue[]);\n    const text = computed(() =>\n      blocks\n        .filter((b) => b?.visible)\n        .map((b) => b.display.text)\n        .join(\" \")\n    );\n    function copy() {\n      navigator.clipboard.writeText(text.value);\n    }\n\n    return { glossed, blocks, copy, contextTranslation };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.card {\n  align-items: flex-start;\n}\n</style>\n","\nimport Context from \"./Context/index.vue\";\nimport Block from \"./Block/index.vue\";\nimport Notes from \"@/components/Notes/index.vue\";\n\nimport { computed, defineComponent, PropType, reactive, ref } from \"vue\";\n\nimport { Phrase, BlockVue } from \"./types\";\n\nexport default defineComponent({\n  components: { Context, Block, Notes },\n  props: {\n    lect: { type: String, default: \"\" },\n    phrase: { type: Object as PropType<Phrase>, default: undefined },\n    editor: Boolean,\n  },\n  setup(props) {\n    const glossed = ref(false);\n    const contextTranslation = computed(() =>\n      props.lect ? props.phrase.context : undefined\n    );\n\n    const blocks = reactive([] as BlockVue[]);\n    const text = computed(() =>\n      blocks\n        .filter((b) => b?.visible)\n        .map((b) => b.display.text)\n        .join(\" \")\n    );\n    function copy() {\n      navigator.clipboard.writeText(text.value);\n    }\n\n    return { glossed, blocks, copy, contextTranslation };\n  },\n});\n","import { render } from \"./PhraseCard.vue?vue&type=template&id=111069ae&scoped=true\"\nimport script from \"./PhraseCard.vue?vue&type=script&lang=ts\"\nexport * from \"./PhraseCard.vue?vue&type=script&lang=ts\"\n\nimport \"./PhraseCard.vue?vue&type=style&index=0&id=111069ae&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-111069ae\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Editor.vue?vue&type=style&index=1&id=7643641f&lang=scss\"","<template>\n  <div v-if=\"file && corpus\" class=\"section col-2 small grid\">\n    <div class=\"col-2\">\n      <div class=\"col-1 wrap card\">\n        <div class=\"row-1\">\n          <p class=\"icon\">topic</p>\n          <h2 class=\"col-1 flex\">\n            <select v-model=\"section\">\n              <option v-for=\"s in corpus\" :key=\"s.name\" :value=\"s\">\n                {{ s.name }}\n              </option>\n            </select>\n          </h2>\n        </div>\n        <div v-if=\"section\" class=\"row-1\">\n          <p class=\"icon\">short_text</p>\n          <select v-model=\"phrase\">\n            <option v-for=\"p in section.phrases\" :key=\"p.id\" :value=\"p\">\n              {{ p.name }}\n            </option>\n          </select>\n        </div>\n        <p class=\"text-faded text-caption\">\n          The source corpus is loading from what is saved on Phrasebook Corpus\n          editor page.\n        </p>\n        <PhraseCard :key=\"phrase.id\" :phrase=\"phrase\" :editor=\"true\" />\n      </div>\n      <template v-if=\"translation\">\n        <BlocksOrderEditor v-model=\"block\" v-model:phrase=\"translation\" />\n        <NotesEditor v-model=\"translation.notes\">\n          You can add notes, for example, to explain certain grammatical rules.\n        </NotesEditor>\n        <ContextTranslationEditor v-model=\"translation.context\">\n          Translate the context keys (entites & tags) to provide full phrase\n          localization.\n        </ContextTranslationEditor>\n      </template>\n    </div>\n    <BlockEditor v-if=\"block\" v-model=\"block\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport PhraseCard from \"./PhraseCard.vue\";\nimport NotesEditor from \"@/components/Notes/Editor.vue\";\nimport BlocksOrderEditor from \"./Block/OrderEditor.vue\";\nimport BlockEditor from \"./Block/Editor.vue\";\nimport ContextTranslationEditor from \"./Context/TranslationEditor.vue\";\n\nimport { defineComponent, ref, watch, provide, toRaw } from \"vue\";\nimport { loadJSON } from \"@/store\";\nimport { setupEditor } from \"@/editor\";\nimport {\n  Block,\n  Context,\n  CorpusPhrase,\n  CorpusSection,\n  Phrase,\n  Phrasebook,\n} from \"./types\";\n\nexport default defineComponent({\n  components: {\n    PhraseCard,\n    NotesEditor,\n    BlocksOrderEditor,\n    BlockEditor,\n    ContextTranslationEditor,\n  },\n  setup() {\n    const corpus = ref([] as CorpusSection[]);\n    try {\n      corpus.value = JSON.parse(localStorage[\"editor.phrasebookCorpus\"]);\n    } catch {\n      loadJSON(\"phrasebook\").then((j) => (corpus.value = j));\n    }\n    const section = ref({} as CorpusSection);\n    const phrase = ref({} as CorpusPhrase);\n    const translation = ref({} as Phrase);\n    const context = ref({} as Context);\n    const contextSource = ref({} as Context);\n    const block = ref({} as Block);\n    const file = setupEditor<Phrasebook>({\n      defaultFile: {},\n      filename: \"phrasebook\",\n      storage: \"editor.phrasebook\",\n    });\n\n    provide(\"context\", context);\n    provide(\"contextSource\", contextSource);\n\n    watch(corpus, (corpus) => (section.value = corpus[corpus.length - 1]), {\n      immediate: true,\n    });\n    watch(\n      section,\n      (section) => {\n        if (section?.phrases)\n          phrase.value = section.phrases[section.phrases.length - 1];\n      },\n      { immediate: true }\n    );\n    watch(\n      [phrase, file],\n      ([phrase]) => {\n        if (!phrase) return;\n        if (!file.value[phrase.id]) file.value[phrase.id] = { blocks: [] };\n        translation.value = file.value[phrase.id];\n        context.value = {};\n        contextSource.value = {};\n        phrase.context.forEach(({ entity, tags }) => {\n          context.value[entity] = new Set();\n          contextSource.value[entity] = new Set(tags.split(\" \"));\n        });\n      },\n      { immediate: true }\n    );\n    watch(\n      translation,\n      (translation) => {\n        if (translation?.blocks)\n          block.value = translation.blocks[translation.blocks.length - 1];\n      },\n      { immediate: true }\n    );\n    function addBlock() {\n      block.value = block.value = {\n        states: [{ display: [{ text: \"new state\" }], transition: \"next\" }],\n      };\n      translation.value.blocks.push(block.value);\n    }\n    function removeBlock() {\n      const blocks = toRaw(translation.value.blocks);\n      const index = blocks.indexOf(toRaw(block.value));\n      blocks.splice(index, 1);\n      block.value = blocks[blocks.length - 1];\n    }\n\n    return {\n      file,\n      corpus,\n      section,\n      phrase,\n      translation,\n      block,\n      addBlock,\n      removeBlock,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n#header {\n  margin-top: -1 * map-get($margins, \"double\");\n  padding-top: 2 * map-get($margins, \"normal\");\n}\n.grid {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr) minmax(0, 1.5fr);\n  gap: map-get($margins, \"double\");\n}\n@media only screen and (max-width: $mobile-width) {\n  .grid {\n    grid-template-columns: 100%;\n  }\n}\n</style>\n\n<style lang=\"scss\">\n.block-editor {\n  gap: 4px 8px;\n}\n</style>\n","<template>\n  <EditorCard\n    :button=\"translation ? '' : 'queue'\"\n    icon=\"format_list_bulleted\"\n    header=\"context translation\"\n    @action=\"add\"\n  >\n    <template #caption><slot /></template>\n    <template v-if=\"translation\" #header>\n      <ButtonAlert @confirm=\"translation = null\" />\n    </template>\n    <template v-if=\"translation\">\n      <div v-for=\"(e, i) in entities\" :key=\"i\" class=\"row wrap\">\n        <div class=\"row wrap block-editor\">\n          <div class=\"col\">\n            <h2 class=\"text-caption\" :class=\"colors[i]\">{{ e[0] }}</h2>\n            <input v-model=\"e[1]\" :size=\"sizes[i].entity\" type=\"text\" />\n          </div>\n          <div v-for=\"(t, j) in tags[i]\" :key=\"t[0]\" class=\"col\">\n            <p class=\"text-caption\">{{ t[0] }}</p>\n            <input v-model=\"t[1]\" :size=\"sizes[i].tags[j]\" type=\"text\" />\n          </div>\n        </div>\n      </div>\n    </template>\n  </EditorCard>\n</template>\n\n<script lang=\"ts\">\nimport ButtonAlert from \"@/components/ButtonAlert.vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\nimport { computed, defineComponent, inject, PropType, Ref } from \"vue\";\nimport { Context, ContextTranslation } from \"../types\";\n\nexport default defineComponent({\n  name: \"PhraseContextTranslationEditor\",\n  components: {\n    ButtonAlert,\n    EditorCard,\n  },\n  props: {\n    modelValue: {\n      type: Object as PropType<ContextTranslation[]>,\n      default: undefined,\n    },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const translation = computed({\n      get: () => props.modelValue,\n      set: (t) => emit(\"update:modelValue\", t),\n    });\n\n    const contextSource = inject(\"contextSource\", {} as Ref<Context>);\n    const entities = computed(() => translation.value?.map((t) => t.entity));\n    const tags = computed(() => translation.value?.map((t) => t.tags));\n    const sizes = computed(() =>\n      translation.value?.map(({ entity, tags }) => ({\n        entity: Math.max(entity[1].length, 1),\n        tags: tags.map((t) => Math.max(t[1].length, 1)),\n      }))\n    );\n    const colors = computed(() =>\n      entities.value?.map((_, i) => \"colored-dot-\" + i)\n    );\n    function add() {\n      translation.value = Object.entries(contextSource.value).map(\n        ([entity, tags]) => ({\n          entity: [entity, \"\"],\n          tags: [...tags].map((t) => [t, \"\"]),\n        })\n      );\n    }\n\n    return { translation, add, entities, tags, sizes, colors };\n  },\n});\n</script>\n","\nimport ButtonAlert from \"@/components/ButtonAlert.vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\nimport { computed, defineComponent, inject, PropType, Ref } from \"vue\";\nimport { Context, ContextTranslation } from \"../types\";\n\nexport default defineComponent({\n  name: \"PhraseContextTranslationEditor\",\n  components: {\n    ButtonAlert,\n    EditorCard,\n  },\n  props: {\n    modelValue: {\n      type: Object as PropType<ContextTranslation[]>,\n      default: undefined,\n    },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const translation = computed({\n      get: () => props.modelValue,\n      set: (t) => emit(\"update:modelValue\", t),\n    });\n\n    const contextSource = inject(\"contextSource\", {} as Ref<Context>);\n    const entities = computed(() => translation.value?.map((t) => t.entity));\n    const tags = computed(() => translation.value?.map((t) => t.tags));\n    const sizes = computed(() =>\n      translation.value?.map(({ entity, tags }) => ({\n        entity: Math.max(entity[1].length, 1),\n        tags: tags.map((t) => Math.max(t[1].length, 1)),\n      }))\n    );\n    const colors = computed(() =>\n      entities.value?.map((_, i) => \"colored-dot-\" + i)\n    );\n    function add() {\n      translation.value = Object.entries(contextSource.value).map(\n        ([entity, tags]) => ({\n          entity: [entity, \"\"],\n          tags: [...tags].map((t) => [t, \"\"]),\n        })\n      );\n    }\n\n    return { translation, add, entities, tags, sizes, colors };\n  },\n});\n","import { render } from \"./TranslationEditor.vue?vue&type=template&id=bf169a72\"\nimport script from \"./TranslationEditor.vue?vue&type=script&lang=ts\"\nexport * from \"./TranslationEditor.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport PhraseCard from \"./PhraseCard.vue\";\nimport NotesEditor from \"@/components/Notes/Editor.vue\";\nimport BlocksOrderEditor from \"./Block/OrderEditor.vue\";\nimport BlockEditor from \"./Block/Editor.vue\";\nimport ContextTranslationEditor from \"./Context/TranslationEditor.vue\";\n\nimport { defineComponent, ref, watch, provide, toRaw } from \"vue\";\nimport { loadJSON } from \"@/store\";\nimport { setupEditor } from \"@/editor\";\nimport {\n  Block,\n  Context,\n  CorpusPhrase,\n  CorpusSection,\n  Phrase,\n  Phrasebook,\n} from \"./types\";\n\nexport default defineComponent({\n  components: {\n    PhraseCard,\n    NotesEditor,\n    BlocksOrderEditor,\n    BlockEditor,\n    ContextTranslationEditor,\n  },\n  setup() {\n    const corpus = ref([] as CorpusSection[]);\n    try {\n      corpus.value = JSON.parse(localStorage[\"editor.phrasebookCorpus\"]);\n    } catch {\n      loadJSON(\"phrasebook\").then((j) => (corpus.value = j));\n    }\n    const section = ref({} as CorpusSection);\n    const phrase = ref({} as CorpusPhrase);\n    const translation = ref({} as Phrase);\n    const context = ref({} as Context);\n    const contextSource = ref({} as Context);\n    const block = ref({} as Block);\n    const file = setupEditor<Phrasebook>({\n      defaultFile: {},\n      filename: \"phrasebook\",\n      storage: \"editor.phrasebook\",\n    });\n\n    provide(\"context\", context);\n    provide(\"contextSource\", contextSource);\n\n    watch(corpus, (corpus) => (section.value = corpus[corpus.length - 1]), {\n      immediate: true,\n    });\n    watch(\n      section,\n      (section) => {\n        if (section?.phrases)\n          phrase.value = section.phrases[section.phrases.length - 1];\n      },\n      { immediate: true }\n    );\n    watch(\n      [phrase, file],\n      ([phrase]) => {\n        if (!phrase) return;\n        if (!file.value[phrase.id]) file.value[phrase.id] = { blocks: [] };\n        translation.value = file.value[phrase.id];\n        context.value = {};\n        contextSource.value = {};\n        phrase.context.forEach(({ entity, tags }) => {\n          context.value[entity] = new Set();\n          contextSource.value[entity] = new Set(tags.split(\" \"));\n        });\n      },\n      { immediate: true }\n    );\n    watch(\n      translation,\n      (translation) => {\n        if (translation?.blocks)\n          block.value = translation.blocks[translation.blocks.length - 1];\n      },\n      { immediate: true }\n    );\n    function addBlock() {\n      block.value = block.value = {\n        states: [{ display: [{ text: \"new state\" }], transition: \"next\" }],\n      };\n      translation.value.blocks.push(block.value);\n    }\n    function removeBlock() {\n      const blocks = toRaw(translation.value.blocks);\n      const index = blocks.indexOf(toRaw(block.value));\n      blocks.splice(index, 1);\n      block.value = blocks[blocks.length - 1];\n    }\n\n    return {\n      file,\n      corpus,\n      section,\n      phrase,\n      translation,\n      block,\n      addBlock,\n      removeBlock,\n    };\n  },\n});\n","import { render } from \"./Editor.vue?vue&type=template&id=7643641f&scoped=true\"\nimport script from \"./Editor.vue?vue&type=script&lang=ts\"\nexport * from \"./Editor.vue?vue&type=script&lang=ts\"\n\nimport \"./Editor.vue?vue&type=style&index=0&id=7643641f&lang=scss&scoped=true\"\nimport \"./Editor.vue?vue&type=style&index=1&id=7643641f&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-7643641f\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Editor.vue?vue&type=style&index=0&id=7643641f&lang=scss&scoped=true\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PhraseCard.vue?vue&type=style&index=0&id=111069ae&lang=scss&scoped=true\"","<template>\n  <div v-if=\"notes.length\" class=\"col\">\n    <p v-for=\"(ps, i) in pieces\" :key=\"i\">\n      <template v-for=\"({ text, display }, j) in ps\" :key=\"j\">\n        <span v-if=\"display === 'plain'\">{{ text }}</span>\n        <span v-else-if=\"display === 'highlight'\" class=\"highlight-font\">{{\n          text\n        }}</span>\n        <b v-else-if=\"display === 'grapheme'\">{{ text }}</b>\n        <span v-else class=\"text-ipa\">{{ text }}</span>\n      </template>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, PropType, defineComponent } from \"vue\";\nimport { PieceDisplay, Piece } from \"./types\";\n\nexport default defineComponent({\n  props: {\n    notes: { type: Array as PropType<string[]>, default: () => [] },\n  },\n  setup(props) {\n    function isWrapped(text: string, start: string, end: string) {\n      return text[0] === start && text[text.length - 1] === end;\n    }\n    function toPiece(text: string): Piece {\n      const patterns = [\n        [\"*\", \"*\", \"highlight\"],\n        [\"/\", \"/\", \"phoneme\"],\n        [\"<\", \">\", \"grapheme\"],\n      ] as [string, string, PieceDisplay][];\n\n      for (const [start, end, display] of patterns) {\n        if (isWrapped(text, start, end))\n          return { text: text.slice(1, -1), display };\n      }\n      return { text, display: \"plain\" };\n    }\n    const pieces = computed(() => {\n      const separator = /(\\/[^/]+\\/|<[^<>]+>|\\*[^*]+\\*)/g;\n      return props.notes.map((n) => n.split(separator).map((n) => toPiece(n)));\n    });\n    return { pieces };\n  },\n});\n</script>\n","\nimport { computed, PropType, defineComponent } from \"vue\";\nimport { PieceDisplay, Piece } from \"./types\";\n\nexport default defineComponent({\n  props: {\n    notes: { type: Array as PropType<string[]>, default: () => [] },\n  },\n  setup(props) {\n    function isWrapped(text: string, start: string, end: string) {\n      return text[0] === start && text[text.length - 1] === end;\n    }\n    function toPiece(text: string): Piece {\n      const patterns = [\n        [\"*\", \"*\", \"highlight\"],\n        [\"/\", \"/\", \"phoneme\"],\n        [\"<\", \">\", \"grapheme\"],\n      ] as [string, string, PieceDisplay][];\n\n      for (const [start, end, display] of patterns) {\n        if (isWrapped(text, start, end))\n          return { text: text.slice(1, -1), display };\n      }\n      return { text, display: \"plain\" };\n    }\n    const pieces = computed(() => {\n      const separator = /(\\/[^/]+\\/|<[^<>]+>|\\*[^*]+\\*)/g;\n      return props.notes.map((n) => n.split(separator).map((n) => toPiece(n)));\n    });\n    return { pieces };\n  },\n});\n","import { render } from \"./index.vue?vue&type=template&id=3ab02e56\"\nimport script from \"./index.vue?vue&type=script&lang=ts\"\nexport * from \"./index.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}