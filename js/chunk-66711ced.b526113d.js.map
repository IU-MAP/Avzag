{"version":3,"sources":["webpack:///./src/components/Notes/Editor.vue","webpack:///./src/components/Notes/Editor.vue?9042","webpack:///./src/components/Notes/Editor.vue?d611","webpack:///./src/Phrasebook/Editor.vue?0c54","webpack:///./src/Phrasebook/Editor.vue","webpack:///./src/Phrasebook/Context/TranslationEditor.vue","webpack:///./src/Phrasebook/Context/TranslationEditor.vue?8d7f","webpack:///./src/Phrasebook/Context/TranslationEditor.vue?7ada","webpack:///./src/Phrasebook/Editor.vue?48a8","webpack:///./src/Phrasebook/Editor.vue?5027","webpack:///./src/Phrasebook/Editor.vue?92ac"],"names":["icon","header","add","caption","notes","n","i","key","class","type","remove","components","EditorCard","props","modelValue","Array","default","undefined","emits","setup","emit","get","set","value","push","splice","render","file","corpus","section","s","name","phrase","phrases","p","id","blocks","b","block","translation","context","button","entities","e","colors","size","sizes","entity","tags","t","j","ButtonAlert","Object","contextSource","map","Math","max","length","_","entries","VContext","VBlock","NotesEditor","BlocksOrderEditor","BlockEditor","ContextTranslationEditor","JSON","parse","localStorage","then","defaultFile","filename","storage","addBlock","states","display","text","transition","removeBlock","index","indexOf","immediate","__scopeId"],"mappings":"sQACE,eAMa,GANDA,KAAK,gBAAgBC,OAAO,QAAS,SAAQ,EAAAC,K,CAC5CC,QAAO,gBAAC,iBAAQ,CAAR,eAAQ,wB,wBACtB,iBAAuB,E,mBAA5B,eAGM,2BAHgB,EAAAC,OAAK,SAAdC,EAAGC,G,wBAAhB,eAGM,OAHwBC,IAAKD,EAAGE,MAAM,O,gBAC1C,eAAwC,S,yCAAxB,EAAAJ,MAAME,GAAC,GAAGG,KAAK,Q,yCAAf,EAAAL,MAAME,MACtB,eAAuC,GAAlCN,KAAK,QAAS,QAAK,mBAAE,EAAAU,OAAOJ,K,kFCDxB,iBAAgB,CAC7BK,WAAY,CAAEC,aAAA,MACdC,MAAO,CACLC,WAAY,CAAEL,KAAMM,MAA6BC,aAASC,IAE5DC,MAAO,CAAC,qBACRC,MAN6B,SAMvBN,EANuB,GAMR,IAANO,EAAM,EAANA,KACPhB,EAAQ,eAAS,CACrBiB,IAAK,kBAAMR,EAAMC,YACjBQ,IAAK,SAACjB,GAAD,OAAOe,EAAK,oBAAqBf,MAGxC,SAASH,IACHE,EAAMmB,MAAOnB,EAAMmB,MAAMC,KAAK,IAC7BpB,EAAMmB,MAAQ,CAAC,IAEtB,SAASb,EAAOJ,GACVF,EAAMmB,OAAOnB,EAAMmB,MAAME,OAAOnB,EAAG,GAGzC,MAAO,CAAEF,QAAOF,MAAKQ,aCrBzB,EAAOgB,OAASA,EAED,U,kCCLf,W,sJCC6BlB,MAAM,4B,GAC1BA,MAAM,S,GACJA,MAAM,iB,GACJA,MAAM,S,EACT,eAAyB,KAAtBA,MAAM,QAAO,SAAK,G,GACjBA,MAAM,c,SAQQA,MAAM,S,EACxB,eAA8B,KAA3BA,MAAM,QAAO,cAAU,G,EAO5B,eAGI,KAHDA,MAAM,2BAA0B,uFAGnC,G,iBAYyC,2E,iBAGe,sF,sQAvCnD,EAAAmB,MAAQ,EAAAC,Q,iBAAnB,eA8CM,MA9CN,EA8CM,CA7CJ,eA2CM,MA3CN,EA2CM,CA1CJ,eA2BM,MA3BN,EA2BM,CA1BJ,eASM,MATN,EASM,CARJ,EACA,eAMK,KANL,EAMK,C,eALH,eAIS,U,qDAJQ,EAAAC,QAAO,K,qBACtB,eAES,2BAFW,EAAAD,QAAM,SAAXE,G,wBAAf,eAES,UAFoBvB,IAAKuB,EAAEC,KAAOR,MAAOO,G,eAC7CA,EAAEC,MAAI,gB,qBAFI,EAAAF,eAOV,EAAAA,S,iBAAX,eAOM,MAPN,EAOM,CANJ,E,eACA,eAIS,U,qDAJQ,EAAAG,OAAM,K,qBACrB,eAES,2BAFW,EAAAH,QAAQI,SAAO,SAApBC,G,wBAAf,eAES,UAF6B3B,IAAK2B,EAAEC,GAAKZ,MAAOW,G,eACpDA,EAAEH,MAAI,gB,qBAFI,EAAAC,a,sBAMnB,EAIA,eAAY,GACD,EAAAA,Q,iBAAX,eAEM,OAFczB,IAAK,EAAAyB,OAAOG,GAAI3B,MAAM,iB,qBACxC,eAA8D,2BAArC,EAAAwB,OAAOI,QAAM,SAAtBC,EAAG/B,G,wBAAnB,eAA8D,GAArBC,IAAKD,EAAIgC,MAAOD,G,sDAG7C,EAAAE,a,iBAAhB,eAaW,gBAZT,eAIE,GAHChC,IAAK,EAAAyB,OAAOG,G,WACJ,EAAAG,M,qDAAA,EAAAA,MAAK,IACNN,OAAQ,EAAAO,Y,iDAAA,EAAAA,YAAW,K,gCAE7B,eAEc,G,WAFQ,EAAAA,YAAYnC,M,qDAAZ,EAAAmC,YAAYnC,MAAK,K,YAAE,iBAEzC,C,6BACA,eAG2B,G,WAHQ,EAAAmC,YAAYC,Q,qDAAZ,EAAAD,YAAYC,QAAO,K,YAAE,iBAGxD,C,2DAGe,EAAAF,O,iBAAnB,eAA4C,G,iBAAT,EAAAA,M,qDAAA,EAAAA,MAAK,K,2KCjC/B9B,MAAM,yB,GACJA,MAAM,O,GAKNA,MAAM,gB,mHAlBnB,eAwBa,GAvBViC,OAAQ,EAAAF,YAAW,WACpBvC,KAAK,uBACLC,OAAO,sBACN,SAAQ,EAAAC,K,gBAEEC,QAAO,gBAAC,iBAAQ,CAAR,eAAQ,wB,wBAI3B,iBAaW,CAbK,EAAAoC,a,mBACd,eAWM,8BAXgB,EAAAG,UAAQ,SAAjBC,EAAGrC,G,wBAAhB,eAWM,OAX2BC,IAAKD,EAAGE,MAAM,Y,CAC7C,eASM,MATN,EASM,CARJ,eAGM,MAHN,EAGM,CAFJ,eAA2D,MAAvDA,MAAK,CAAC,eAAuB,EAAAoC,OAAOtC,K,eAAOqC,EAAE,IAAD,G,eAChD,eAA4D,S,yCAA5CA,EAAE,GAAD,GAAME,KAAM,EAAAC,MAAMxC,GAAGyC,OAAQtC,KAAK,Q,gDAAnCkC,EAAE,S,mBAEpB,eAGM,2BAHgB,EAAAK,KAAK1C,IAAC,SAAf2C,EAAGC,G,wBAAhB,eAGM,OAH0B3C,IAAK0C,EAAE,GAAIzC,MAAM,O,CAC/C,eAAsC,IAAtC,EAAsC,eAAXyC,EAAE,IAAD,G,eAC5B,eAA6D,S,yCAA7CA,EAAE,GAAD,GAAMJ,KAAM,EAAAC,MAAMxC,GAAG0C,KAAKE,GAAIzC,KAAK,Q,gDAApCwC,EAAE,W,mDAZV,EAAAV,Y,MAAc,S,mBAC5B,iBAA6C,CAA7C,eAA6C,GAA/B,UAAO,+BAAE,EAAAA,YAAW,mB,4FCHzB,iBAAgB,CAC7BR,KAAM,iCACNpB,WAAY,CACVwC,cAAA,KACAvC,aAAA,MAEFC,MAAO,CACLC,WAAY,CACVL,KAAM2C,OACNpC,aAASC,IAGbC,MAAO,CAAC,qBACRC,MAb6B,SAavBN,EAbuB,GAaR,IAANO,EAAM,EAANA,KACPmB,EAAc,eAAS,CAC3BlB,IAAK,kBAAMR,EAAMC,YACjBQ,IAAK,SAAC2B,GAAD,OAAO7B,EAAK,oBAAqB6B,MAGlCI,EAAgB,eAAO,gBAAiB,IACxCX,EAAW,gBAAS,kCAAMH,EAAYhB,aAAlB,aAAM,EAAmB+B,KAAI,SAACL,GAAD,OAAOA,EAAEF,aAC1DC,EAAO,gBAAS,kCAAMT,EAAYhB,aAAlB,aAAM,EAAmB+B,KAAI,SAACL,GAAD,OAAOA,EAAED,WACtDF,EAAQ,gBAAS,kCACrBP,EAAYhB,aADS,aACrB,EAAmB+B,KAAI,gBAAGP,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAX,MAAuB,CAC5CD,OAAQQ,KAAKC,IAAIT,EAAO,GAAGU,OAAQ,GACnCT,KAAMA,EAAKM,KAAI,SAACL,GAAD,OAAOM,KAAKC,IAAIP,EAAE,GAAGQ,OAAQ,aAG1Cb,EAAS,gBAAS,kCACtBF,EAASnB,aADa,aACtB,EAAgB+B,KAAI,SAACI,EAAGpD,GAAJ,MAAU,eAAiBA,QAEjD,SAASJ,IACPqC,EAAYhB,MAAQ6B,OAAOO,QAAQN,EAAc9B,OAAO+B,KACtD,sCAAEP,EAAF,KAAUC,EAAV,WAAqB,CACnBD,OAAQ,CAACA,EAAQ,IACjBC,KAAM,eAAIA,GAAMM,KAAI,SAACL,GAAD,MAAO,CAACA,EAAG,WAKrC,MAAO,CAAEV,cAAarC,MAAKwC,WAAUM,OAAMF,QAAOF,aC3CtD,EAAOlB,OAAS,EAED,Q,oCCgBA,iBAAgB,CAC7Bf,WAAY,CACViD,SAAA,OACAC,OAAA,OACAC,YAAA,OACAC,kBAAA,OACAC,YAAA,OACAC,yBAAA,GAEF9C,MAT6B,WAU3B,IAAMS,EAAS,eAAI,IACnB,IACEA,EAAOL,MAAQ2C,KAAKC,MAAMC,aAAa,4BACvC,SACA,eAAS,cAAcC,MAAK,SAACnB,GAAD,OAAQtB,EAAOL,MAAQ2B,KAErD,IAAMrB,EAAU,eAAI,IACdG,EAAS,eAAI,IACbO,EAAc,eAAI,IAClBC,EAAU,eAAI,IACda,EAAgB,eAAI,IACpBf,EAAQ,eAAI,IACZX,EAAO,eAAwB,CACnC2C,YAAa,GACbC,SAAU,aACVC,QAAS,sBAoCX,SAASC,IACPnC,EAAMf,MAAQe,EAAMf,MAAQ,CAC1BmD,OAAQ,CAAC,CAAEC,QAAS,CAAC,CAAEC,KAAM,cAAgBC,WAAY,UAE3DtC,EAAYhB,MAAMa,OAAOZ,KAAKc,EAAMf,OAEtC,SAASuD,IACP,IAAM1C,EAAS,eAAMG,EAAYhB,MAAMa,QACjC2C,EAAQ3C,EAAO4C,QAAQ,eAAM1C,EAAMf,QACzCa,EAAOX,OAAOsD,EAAO,GACrBzC,EAAMf,MAAQa,EAAOA,EAAOqB,OAAS,GAGvC,OA9CA,eAAQ,UAAWjB,GACnB,eAAQ,gBAAiBa,GAEzB,eAAMzB,GAAQ,SAACA,GAAD,OAAaC,EAAQN,MAAQK,EAAOA,EAAO6B,OAAS,KAAK,CACrEwB,WAAW,IAEb,eACEpD,GACA,SAACA,GACC,OAAIA,QAAJ,IAAIA,KAASI,UACXD,EAAOT,MAAQM,EAAQI,QAAQJ,EAAQI,QAAQwB,OAAS,MAE5D,CAAEwB,WAAW,IAEf,eACE,CAACjD,EAAQL,IACT,YAAa,0BAAXK,EAAW,KACNA,IACAL,EAAKJ,MAAMS,EAAOG,MAAKR,EAAKJ,MAAMS,EAAOG,IAAM,CAAEC,OAAQ,KAC9DG,EAAYhB,MAAQI,EAAKJ,MAAMS,EAAOG,IACtC,eAAcK,EAASR,EAAOQ,SAC9B,eAAca,EAAerB,EAAOQ,SAAS,MAE/C,CAAEyC,WAAW,IAEf,eACE1C,GACA,SAACA,GACC,OAAIA,QAAJ,IAAIA,KAAaH,SACfE,EAAMf,MAAQgB,EAAYH,OAAOG,EAAYH,OAAOqB,OAAS,MAEjE,CAAEwB,WAAW,IAeR,CACLtD,OACAC,SACAC,UACAG,SACAO,cACAD,QACAmC,WACAK,kB,oBCjGN,EAAOpD,OAASA,EAChB,EAAOwD,UAAY,kBAEJ,gB,kCCTf,W","file":"js/chunk-66711ced.b526113d.js","sourcesContent":["<template>\n  <EditorCard icon=\"sticky_note_2\" header=\"Notes\" @action=\"add\">\n    <template #caption><slot /></template>\n    <div v-for=\"(n, i) in notes\" :key=\"i\" class=\"row\">\n      <input v-model=\"notes[i]\" type=\"text\" />\n      <btn icon=\"clear\" @click=\"remove(i)\" />\n    </div>\n  </EditorCard>\n</template>\n\n<script lang=\"ts\">\nimport { PropType, computed, defineComponent } from \"vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\n\nexport default defineComponent({\n  components: { EditorCard },\n  props: {\n    modelValue: { type: Array as PropType<string[]>, default: undefined },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const notes = computed({\n      get: () => props.modelValue,\n      set: (n) => emit(\"update:modelValue\", n),\n    });\n\n    function add() {\n      if (notes.value) notes.value.push(\"\");\n      else notes.value = [\"\"];\n    }\n    function remove(i: number) {\n      if (notes.value) notes.value.splice(i, 1);\n    }\n\n    return { notes, add, remove };\n  },\n});\n</script>\n","\nimport { PropType, computed, defineComponent } from \"vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\n\nexport default defineComponent({\n  components: { EditorCard },\n  props: {\n    modelValue: { type: Array as PropType<string[]>, default: undefined },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const notes = computed({\n      get: () => props.modelValue,\n      set: (n) => emit(\"update:modelValue\", n),\n    });\n\n    function add() {\n      if (notes.value) notes.value.push(\"\");\n      else notes.value = [\"\"];\n    }\n    function remove(i: number) {\n      if (notes.value) notes.value.splice(i, 1);\n    }\n\n    return { notes, add, remove };\n  },\n});\n","import { render } from \"./Editor.vue?vue&type=template&id=60866d64\"\nimport script from \"./Editor.vue?vue&type=script&lang=ts\"\nexport * from \"./Editor.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Editor.vue?vue&type=style&index=1&id=249239ff&lang=scss\"","<template>\n  <div v-if=\"file && corpus\" class=\"section col-2 small grid\">\n    <div class=\"col-2\">\n      <div class=\"col wrap card\">\n        <div class=\"row-1\">\n          <p class=\"icon\">topic</p>\n          <h2 class=\"col-1 flex\">\n            <select v-model=\"section\">\n              <option v-for=\"s in corpus\" :key=\"s.name\" :value=\"s\">\n                {{ s.name }}\n              </option>\n            </select>\n          </h2>\n        </div>\n        <div v-if=\"section\" class=\"row-1\">\n          <p class=\"icon\">short_text</p>\n          <select v-model=\"phrase\">\n            <option v-for=\"p in section.phrases\" :key=\"p.id\" :value=\"p\">\n              {{ p.name }}\n            </option>\n          </select>\n        </div>\n        <p class=\"text-faded text-caption\">\n          The source corpus is loading from what is saved on Phrasebook Corpus\n          editor page.\n        </p>\n        <VContext />\n        <div v-if=\"phrase\" :key=\"phrase.id\" class=\"row wrap flex\">\n          <VBlock v-for=\"(b, i) in phrase.blocks\" :key=\"i\" :block=\"b\" />\n        </div>\n      </div>\n      <template v-if=\"translation\">\n        <BlocksOrderEditor\n          :key=\"phrase.id\"\n          v-model=\"block\"\n          v-model:phrase=\"translation\"\n        />\n        <NotesEditor v-model=\"translation.notes\">\n          You can add notes, for example, to explain certain grammatical rules.\n        </NotesEditor>\n        <ContextTranslationEditor v-model=\"translation.context\">\n          Translate the context keys (entites & tags) to provide full phrase\n          localization.\n        </ContextTranslationEditor>\n      </template>\n    </div>\n    <BlockEditor v-if=\"block\" v-model=\"block\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport NotesEditor from \"@/components/Notes/Editor.vue\";\nimport VContext from \"./Context/index.vue\";\nimport VBlock from \"./Block/index.vue\";\nimport BlocksOrderEditor from \"./Block/OrderEditor.vue\";\nimport BlockEditor from \"./Block/Editor.vue\";\nimport ContextTranslationEditor from \"./Context/TranslationEditor.vue\";\n\nimport { defineComponent, ref, watch, provide, toRaw } from \"vue\";\nimport { loadJSON } from \"@/store\";\nimport { setupEditor } from \"@/editor\";\nimport {\n  Block,\n  Context,\n  CorpusPhrase,\n  CorpusSection,\n  Phrase,\n  Phrasebook,\n} from \"./types\";\nimport { createContext } from \"./utils\";\n\nexport default defineComponent({\n  components: {\n    VContext,\n    VBlock,\n    NotesEditor,\n    BlocksOrderEditor,\n    BlockEditor,\n    ContextTranslationEditor,\n  },\n  setup() {\n    const corpus = ref([] as CorpusSection[]);\n    try {\n      corpus.value = JSON.parse(localStorage[\"editor.phrasebookCorpus\"]);\n    } catch {\n      loadJSON(\"phrasebook\").then((j) => (corpus.value = j));\n    }\n    const section = ref({} as CorpusSection);\n    const phrase = ref({} as CorpusPhrase);\n    const translation = ref({} as Phrase);\n    const context = ref({} as Context);\n    const contextSource = ref({} as Context);\n    const block = ref({} as Block);\n    const file = setupEditor<Phrasebook>({\n      defaultFile: {},\n      filename: \"phrasebook\",\n      storage: \"editor.phrasebook\",\n    });\n\n    provide(\"context\", context);\n    provide(\"contextSource\", contextSource);\n\n    watch(corpus, (corpus) => (section.value = corpus[corpus.length - 1]), {\n      immediate: true,\n    });\n    watch(\n      section,\n      (section) => {\n        if (section?.phrases)\n          phrase.value = section.phrases[section.phrases.length - 1];\n      },\n      { immediate: true }\n    );\n    watch(\n      [phrase, file],\n      ([phrase]) => {\n        if (!phrase) return;\n        if (!file.value[phrase.id]) file.value[phrase.id] = { blocks: [] };\n        translation.value = file.value[phrase.id];\n        createContext(context, phrase.context);\n        createContext(contextSource, phrase.context, true);\n      },\n      { immediate: true }\n    );\n    watch(\n      translation,\n      (translation) => {\n        if (translation?.blocks)\n          block.value = translation.blocks[translation.blocks.length - 1];\n      },\n      { immediate: true }\n    );\n    function addBlock() {\n      block.value = block.value = {\n        states: [{ display: [{ text: \"new state\" }], transition: \"next\" }],\n      };\n      translation.value.blocks.push(block.value);\n    }\n    function removeBlock() {\n      const blocks = toRaw(translation.value.blocks);\n      const index = blocks.indexOf(toRaw(block.value));\n      blocks.splice(index, 1);\n      block.value = blocks[blocks.length - 1];\n    }\n\n    return {\n      file,\n      corpus,\n      section,\n      phrase,\n      translation,\n      block,\n      addBlock,\n      removeBlock,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n#header {\n  margin-top: -1 * map-get($margins, \"double\");\n  padding-top: 2 * map-get($margins, \"normal\");\n}\n.grid {\n  display: grid;\n  grid-template-columns: minmax(0, 1fr) minmax(0, 1.5fr);\n  gap: map-get($margins, \"double\");\n}\n@media only screen and (max-width: $mobile-width) {\n  .grid {\n    grid-template-columns: 100%;\n  }\n}\n</style>\n\n<style lang=\"scss\">\n.block-editor {\n  gap: 4px 8px;\n}\n</style>\n","<template>\n  <EditorCard\n    :button=\"translation ? '' : 'queue'\"\n    icon=\"format_list_bulleted\"\n    header=\"context translation\"\n    @action=\"add\"\n  >\n    <template #caption><slot /></template>\n    <template v-if=\"translation\" #header>\n      <ButtonAlert @confirm=\"translation = null\" />\n    </template>\n    <template v-if=\"translation\">\n      <div v-for=\"(e, i) in entities\" :key=\"i\" class=\"row wrap\">\n        <div class=\"row wrap block-editor\">\n          <div class=\"col\">\n            <h2 class=\"text-caption\" :class=\"colors[i]\">{{ e[0] }}</h2>\n            <input v-model=\"e[1]\" :size=\"sizes[i].entity\" type=\"text\" />\n          </div>\n          <div v-for=\"(t, j) in tags[i]\" :key=\"t[0]\" class=\"col\">\n            <p class=\"text-caption\">{{ t[0] }}</p>\n            <input v-model=\"t[1]\" :size=\"sizes[i].tags[j]\" type=\"text\" />\n          </div>\n        </div>\n      </div>\n    </template>\n  </EditorCard>\n</template>\n\n<script lang=\"ts\">\nimport ButtonAlert from \"@/components/ButtonAlert.vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\nimport { computed, defineComponent, inject, PropType, Ref } from \"vue\";\nimport { Context, ContextTranslation } from \"../types\";\n\nexport default defineComponent({\n  name: \"PhraseContextTranslationEditor\",\n  components: {\n    ButtonAlert,\n    EditorCard,\n  },\n  props: {\n    modelValue: {\n      type: Object as PropType<ContextTranslation[]>,\n      default: undefined,\n    },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const translation = computed({\n      get: () => props.modelValue,\n      set: (t) => emit(\"update:modelValue\", t),\n    });\n\n    const contextSource = inject(\"contextSource\", {} as Ref<Context>);\n    const entities = computed(() => translation.value?.map((t) => t.entity));\n    const tags = computed(() => translation.value?.map((t) => t.tags));\n    const sizes = computed(() =>\n      translation.value?.map(({ entity, tags }) => ({\n        entity: Math.max(entity[1].length, 1),\n        tags: tags.map((t) => Math.max(t[1].length, 1)),\n      }))\n    );\n    const colors = computed(() =>\n      entities.value?.map((_, i) => \"colored-dot-\" + i)\n    );\n    function add() {\n      translation.value = Object.entries(contextSource.value).map(\n        ([entity, tags]) => ({\n          entity: [entity, \"\"],\n          tags: [...tags].map((t) => [t, \"\"]),\n        })\n      );\n    }\n\n    return { translation, add, entities, tags, sizes, colors };\n  },\n});\n</script>\n","\nimport ButtonAlert from \"@/components/ButtonAlert.vue\";\nimport EditorCard from \"@/components/EditorCard.vue\";\nimport { computed, defineComponent, inject, PropType, Ref } from \"vue\";\nimport { Context, ContextTranslation } from \"../types\";\n\nexport default defineComponent({\n  name: \"PhraseContextTranslationEditor\",\n  components: {\n    ButtonAlert,\n    EditorCard,\n  },\n  props: {\n    modelValue: {\n      type: Object as PropType<ContextTranslation[]>,\n      default: undefined,\n    },\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, { emit }) {\n    const translation = computed({\n      get: () => props.modelValue,\n      set: (t) => emit(\"update:modelValue\", t),\n    });\n\n    const contextSource = inject(\"contextSource\", {} as Ref<Context>);\n    const entities = computed(() => translation.value?.map((t) => t.entity));\n    const tags = computed(() => translation.value?.map((t) => t.tags));\n    const sizes = computed(() =>\n      translation.value?.map(({ entity, tags }) => ({\n        entity: Math.max(entity[1].length, 1),\n        tags: tags.map((t) => Math.max(t[1].length, 1)),\n      }))\n    );\n    const colors = computed(() =>\n      entities.value?.map((_, i) => \"colored-dot-\" + i)\n    );\n    function add() {\n      translation.value = Object.entries(contextSource.value).map(\n        ([entity, tags]) => ({\n          entity: [entity, \"\"],\n          tags: [...tags].map((t) => [t, \"\"]),\n        })\n      );\n    }\n\n    return { translation, add, entities, tags, sizes, colors };\n  },\n});\n","import { render } from \"./TranslationEditor.vue?vue&type=template&id=bf169a72\"\nimport script from \"./TranslationEditor.vue?vue&type=script&lang=ts\"\nexport * from \"./TranslationEditor.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport NotesEditor from \"@/components/Notes/Editor.vue\";\nimport VContext from \"./Context/index.vue\";\nimport VBlock from \"./Block/index.vue\";\nimport BlocksOrderEditor from \"./Block/OrderEditor.vue\";\nimport BlockEditor from \"./Block/Editor.vue\";\nimport ContextTranslationEditor from \"./Context/TranslationEditor.vue\";\n\nimport { defineComponent, ref, watch, provide, toRaw } from \"vue\";\nimport { loadJSON } from \"@/store\";\nimport { setupEditor } from \"@/editor\";\nimport {\n  Block,\n  Context,\n  CorpusPhrase,\n  CorpusSection,\n  Phrase,\n  Phrasebook,\n} from \"./types\";\nimport { createContext } from \"./utils\";\n\nexport default defineComponent({\n  components: {\n    VContext,\n    VBlock,\n    NotesEditor,\n    BlocksOrderEditor,\n    BlockEditor,\n    ContextTranslationEditor,\n  },\n  setup() {\n    const corpus = ref([] as CorpusSection[]);\n    try {\n      corpus.value = JSON.parse(localStorage[\"editor.phrasebookCorpus\"]);\n    } catch {\n      loadJSON(\"phrasebook\").then((j) => (corpus.value = j));\n    }\n    const section = ref({} as CorpusSection);\n    const phrase = ref({} as CorpusPhrase);\n    const translation = ref({} as Phrase);\n    const context = ref({} as Context);\n    const contextSource = ref({} as Context);\n    const block = ref({} as Block);\n    const file = setupEditor<Phrasebook>({\n      defaultFile: {},\n      filename: \"phrasebook\",\n      storage: \"editor.phrasebook\",\n    });\n\n    provide(\"context\", context);\n    provide(\"contextSource\", contextSource);\n\n    watch(corpus, (corpus) => (section.value = corpus[corpus.length - 1]), {\n      immediate: true,\n    });\n    watch(\n      section,\n      (section) => {\n        if (section?.phrases)\n          phrase.value = section.phrases[section.phrases.length - 1];\n      },\n      { immediate: true }\n    );\n    watch(\n      [phrase, file],\n      ([phrase]) => {\n        if (!phrase) return;\n        if (!file.value[phrase.id]) file.value[phrase.id] = { blocks: [] };\n        translation.value = file.value[phrase.id];\n        createContext(context, phrase.context);\n        createContext(contextSource, phrase.context, true);\n      },\n      { immediate: true }\n    );\n    watch(\n      translation,\n      (translation) => {\n        if (translation?.blocks)\n          block.value = translation.blocks[translation.blocks.length - 1];\n      },\n      { immediate: true }\n    );\n    function addBlock() {\n      block.value = block.value = {\n        states: [{ display: [{ text: \"new state\" }], transition: \"next\" }],\n      };\n      translation.value.blocks.push(block.value);\n    }\n    function removeBlock() {\n      const blocks = toRaw(translation.value.blocks);\n      const index = blocks.indexOf(toRaw(block.value));\n      blocks.splice(index, 1);\n      block.value = blocks[blocks.length - 1];\n    }\n\n    return {\n      file,\n      corpus,\n      section,\n      phrase,\n      translation,\n      block,\n      addBlock,\n      removeBlock,\n    };\n  },\n});\n","import { render } from \"./Editor.vue?vue&type=template&id=249239ff&scoped=true\"\nimport script from \"./Editor.vue?vue&type=script&lang=ts\"\nexport * from \"./Editor.vue?vue&type=script&lang=ts\"\n\nimport \"./Editor.vue?vue&type=style&index=0&id=249239ff&lang=scss&scoped=true\"\nimport \"./Editor.vue?vue&type=style&index=1&id=249239ff&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-249239ff\"\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Editor.vue?vue&type=style&index=0&id=249239ff&lang=scss&scoped=true\""],"sourceRoot":""}